from checkers_and_funcs import random_sleep, check_login, check_unavailable, login, go_to_services, check_salter
from driver_setup import create_driver
from logger_config import setup_logger

logger = setup_logger(__name__)


def main():
    driver = create_driver()
    logger.info("üöó –î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")

    login(driver)

    if not check_unavailable(driver):
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω...")
        if check_login(driver):
            logger.info("üîê–õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            driver.quit()
            logger.info("üõë –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            return

        random_sleep()
        go_to_services(driver)

        for salter_id in (1151, 1258):
            logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç: {salter_id}")
            slot_found = check_salter(driver, salter_id)
            if slot_found:
                logger.info("‚è∏Ô∏è –°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                return  # <--- –ó–∞–≤–µ—Ä—à–∞–µ–º main(), –Ω–æ –¥—Ä–∞–π–≤–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–µ–Ω
    else:
        logger.warning("üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (unavailable)")

    driver.quit()
    logger.info("üõë –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    main()
