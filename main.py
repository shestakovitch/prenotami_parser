from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

from checkers_and_funcs import random_sleep, check_login, check_popup, check_unavailable, login, check_salter
from driver_setup import create_driver
from logger_config import setup_logger

logger = setup_logger(__name__)


def main():
    driver = create_driver()
    logger.info("üöó –î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")

    login(driver)
    logger.info("üîê –í—ã–ø–æ–ª–Ω–µ–Ω –ª–æ–≥–∏–Ω")

    if not check_unavailable(driver):
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω...")
        if check_login(driver):
            logger.info("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –õ–æ–≥–∏–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É–¥–∞–ª—Å—è")

        random_sleep()

        try:
            driver.find_element(By.ID, value="advanced").send_keys(Keys.ENTER)
            logger.info("‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–ø–∏—Å—å—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {e}")
            driver.quit()
            return

        for salter_id in (1151, 1258):
            logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç: {salter_id}")
            check_salter(driver, salter_id)
    else:
        logger.warning("üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (unavailable)")

    driver.quit()
    logger.info("üõë –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    main()
