import time
import random
from selenium.common import NoSuchElementException, TimeoutException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from config import BASE_URL, LOGIN, PASSWORD, USER_NAME
from telegram_sender import send_message, send_pic
from logger_config import setup_logger

logger = setup_logger(__name__)


def random_sleep(min_seconds=1, max_seconds=5):
    time.sleep(random.uniform(min_seconds, max_seconds))


def login(driver):
    logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω")
    driver.get(url=BASE_URL)

    try:
        email_element = driver.find_element(By.ID, value="login-email")
        email_element.clear()
        email_element.send_keys(LOGIN)
        random_sleep()

        password_element = driver.find_element(By.ID, value="login-password")
        password_element.clear()
        password_element.send_keys(PASSWORD)
        password_element.send_keys(Keys.RETURN)
        random_sleep()
        logger.info("–õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")


def check_unavailable(driver):
    try:
        if "unavailable" in driver.page_source.lower():
            driver.save_screenshot("unavailable.png")
            logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (unavailable)")
            driver.quit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    return False


def check_login(driver):
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//figure[@class='main-nav__avatar']//figcaption[contains(text(), '{USER_NAME}')]"))
        )
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
        return True
    except NoSuchElementException:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return False
    except TimeoutException:
        logger.warning("‚è±Ô∏è –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–æ–≥–∏–Ω–∞.")
        return False


def check_popup(driver, timeout=10):
    random_sleep()
    try:
        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
        popup = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((
                By.XPATH,
                "//*[contains(text(), 'Sorry, all appointments for this service are currently booked')]"
            ))
        )
        logger.info("‚ö†Ô∏è –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: %s", popup.text)

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ OK
        ok_button = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, "//button[text()='ok']"))
        )
        ok_button.click()
        return True

    except TimeoutException:
        driver.save_screenshot("slot.png")
        logger.info("‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å.")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞: {e}")
        return False


def check_salter(driver, param, timeout=5):
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–∞ {param}...")
        selector = f'a[href="/Services/Booking/{param}"]'
        element = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
        )
        element.send_keys(Keys.ENTER)
        random_sleep()

        if not check_popup(driver):
            logger.info("üü¢ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç!")
            driver.save_screenshot("slot.png")
            send_message(f"–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ {BASE_URL}/Services/Booking/{param}")
            send_pic("slot.png")
    except TimeoutException:
        logger.warning(f"‚è±Ô∏è –≠–ª–µ–º–µ–Ω—Ç {param} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–∞ {param}: {e}")
