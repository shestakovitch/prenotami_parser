import time
import random
import threading
import sys
from pathlib import Path
from selenium.common import NoSuchElementException, TimeoutException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.action_chains import ActionChains  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏

from config import BASE_URL, LOGIN, PASSWORD, USER_NAME, USER_ADDRESS, SECOND_PERSON_SURNAME, SECOND_PERSON_NAME, \
    SECOND_PERSON_ADDRESS, SECOND_PERSON_DOB, SECOND_PERSON_STATUS
from telegram_sender import send_message, send_pic
from logger_config import setup_logger

logger = setup_logger(__name__)


def random_sleep(min_seconds=1, max_seconds=5):
    time.sleep(random.uniform(min_seconds, max_seconds))


def scroll_page(driver):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∫–æ–Ω—Ü–∞"""
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    random_sleep()


def move_mouse(driver):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
    actions = ActionChains(driver)
    actions.move_to_element(driver.find_element(By.TAG_NAME, "body")).perform()
    random_sleep()


def human_typing(element, text):
    for char in text:
        element.send_keys(char)
        time.sleep(random.uniform(0.1, 0.3))


def login(driver):
    logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω")
    driver.get(url=BASE_URL)

    try:
        scroll_page(driver)
        move_mouse(driver)

        # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é email –º—ã—à—å—é
        email_element = driver.find_element(By.ID, value="login-email")
        ActionChains(driver).move_to_element(email_element).click().perform()
        human_typing(email_element, LOGIN)
        random_sleep(1, 2)

        # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é password –º—ã—à—å—é
        password_element = driver.find_element(By.ID, value="login-password")
        ActionChains(driver).move_to_element(password_element).click().perform()
        human_typing(password_element, PASSWORD)
        random_sleep(1, 2)

        # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞ –º—ã—à—å—é
        login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
        ActionChains(driver).move_to_element(login_button).click().perform()
        time.sleep(5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")
        return False


def check_unavailable_or_verification_error(driver):
    """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—à–∏–±–∫–∏.
        –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ª–æ–≥–∏—Ä—É–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
        """
    try:
        if "unavailable" in driver.title.lower():
            logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: unavailable")
            driver.quit()
            return True
        if "error" in driver.current_url.lower():
            logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: An error occurred while processing the request")
            time.sleep(300)
            driver.quit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    return False


def check_login(driver):
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//figure[@class='main-nav__avatar']//figcaption[contains(text(), '{USER_NAME}')]"))
        )
        return True
    except NoSuchElementException:
        return False
    except TimeoutException:
        logger.warning("‚è±Ô∏è –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–æ–≥–∏–Ω–∞.")
        return False


def go_to_services(driver):
    try:
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —ç–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        scroll_page(driver)
        move_mouse(driver)

        driver.find_element(By.ID, value="advanced").send_keys(Keys.ENTER)
        logger.info("‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–ø–∏—Å—å—é")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {e}")
        driver.quit()
        return


def check_popup_or_site_down(driver, timeout=10):
    random_sleep()
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø–∞–ø —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–ª–æ—Ç–æ–≤
        popup = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((
                By.XPATH,
                "//*[contains(text(), 'Sorry, all appointments for this service are currently booked')]"
            ))
        )
        logger.info("‚ö†Ô∏è –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: %s", popup.text)

        ok_button = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, "//button[text()='ok']"))
        )
        ok_button.click()
        return True

    except TimeoutException:
        # –ü–æ–ø–∞–ø –Ω–µ –ø–æ—è–≤–∏–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–∞–ª –ª–∏ —Å–∞–π—Ç
        page_text = driver.page_source.lower()
        for message in ("this site can‚Äôt be reached", "this site can't be reached", "runtime error"):
            if message in page_text:
                logger.error("üö´ –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: This site can't be reached")
                driver.quit()
                return True  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–ø–∞–ø—É
        logger.info("‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {e}")
        return False


def check_salter(driver, param, timeout=5):
    try:
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —ç–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        scroll_page(driver)
        move_mouse(driver)

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–∞ {param}...")
        selector = f'a[href="/Services/Booking/{param}"]'
        element = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
        )
        element.send_keys(Keys.ENTER)
        random_sleep()

        if not check_popup_or_site_down(driver):
            logger.info("üü¢ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç!")

            # 1. –í—ã–±–æ—Ä "Kolektivna rezervacija" –ø–æ —Ç–µ–∫—Å—Ç—É label
            label_booking = driver.find_element(By.XPATH, "//label[contains(text(), 'Vrsta rezervacije')]")
            select_booking = label_booking.find_element(By.XPATH, "./following-sibling::select")
            Select(select_booking).select_by_visible_text("Kolektivna rezervacija")

            # –ü–æ–¥–æ–∂–¥–µ–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –±–ª–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            time.sleep(1)

            # 2. –í—ã–±–æ—Ä "1" –≤ "Broj dodatnih podnosilaca zahteva"
            label_companions = driver.find_element(By.XPATH,
                                                   "//label[contains(text(), 'Broj dodatnih podnosilaca zahteva')]")
            select_companions = label_companions.find_element(By.XPATH, "./following-sibling::select")
            Select(select_companions).select_by_value("1")

            # Drugo/a dr≈æavljanstvo
            input_citizenship = driver.find_element(By.ID, "DatiAddizionaliPrenotante_0___testo")
            input_citizenship.clear()
            input_citizenship.send_keys("Russia")

            # Razlog Boravka
            select_reason = Select(driver.find_element(By.ID, "ddls_1"))
            select_reason.select_by_visible_text("Turizam")

            # Adresa prebivali≈°ta
            input_address = driver.find_element(By.ID, "DatiAddizionaliPrenotante_2___testo")
            input_address.clear()
            input_address.send_keys(USER_ADDRESS)

            # –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            driver.execute_script("document.getElementById('ifMultiple').style.display = 'block';")
            driver.execute_script("document.getElementById('divCompanion_0').style.display = 'block';")

            # –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            driver.find_element(By.ID, "Accompagnatori_0__CognomeAccompagnatore").send_keys(SECOND_PERSON_SURNAME)
            driver.find_element(By.ID, "Accompagnatori_0__NomeAccompagnatore").send_keys(SECOND_PERSON_NAME)
            driver.find_element(By.ID, "Accompagnatori_0__DataNascitaAccompagnatore").send_keys(SECOND_PERSON_DOB)

            # –≤—ã–±—Ä–∞—Ç—å "Srodstvo" = Supru≈ænik
            relation_select = Select(driver.find_element(By.ID, "ddlRelation_0"))
            relation_select.select_by_visible_text(SECOND_PERSON_STATUS)

            # –∑–∞–ø–æ–ª–Ω–∏—Ç—å "Drugo/a dr≈æavljanstvo"
            driver.find_element(By.NAME, "Accompagnatori[0].DatiAddizionaliAccompagnatore[0]._testo").send_keys(
                "Russia")

            # –≤—ã–±—Ä–∞—Ç—å "Razlog Boravka" = Turizam
            razlog_select = Select(driver.find_element(By.ID, "ddlsAcc_1"))  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π ID
            razlog_select.select_by_visible_text("Turizam")

            # –∑–∞–ø–æ–ª–Ω–∏—Ç—å "Adresa prebivali≈°ta"
            driver.find_element(By.NAME, "Accompagnatori[0].DatiAddizionaliAccompagnatore[2]._testo").send_keys(
                SECOND_PERSON_ADDRESS)

            otp_button = driver.find_element(By.ID, "otp-send").click()

            Path("slot.html").write_text(driver.page_source, encoding="utf-8")

            driver.save_screenshot("slot.png")
            send_message(f"–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ {BASE_URL}/Services/Booking/{param}")
            send_pic("slot.png")

            # –¢–∞–π–º–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç –≤—Ä—É—á–Ω—É—é
            def auto_exit():
                logger.warning("\n‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
                sys.exit()

            timer = threading.Timer(600, auto_exit)  # 10 –º–∏–Ω—É—Ç
            timer.start()

            # –ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                input(
                    "‚è∏ –°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ù–∞–∂–º–∏—Ç–µ Enter, "
                    "—á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é —Ä–∞–Ω—å—à–µ —Ç–∞–π–º–µ—Ä–∞...\n")
                timer.cancel()
                logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –≤—Ä—É—á–Ω—É—é.")
                sys.exit()
            except KeyboardInterrupt:
                logger.warning("\nüö™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                sys.exit()

    except TimeoutException:
        logger.warning(f"‚è±Ô∏è –≠–ª–µ–º–µ–Ω—Ç {param} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–∞ {param}: {e}")
